<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Landing Page</title>
    <script src="https://cdn.tailwindcss.com"></script>
    
    <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

    <script defer src="assets/animejs/lib/anime.min.js"></script>
    <!-- Swiper.js CSS -->
    <link rel="stylesheet" href="assets/swiper/swiper-bundle.min.css">
    <style>
        /* Custom Tailwind Config */
        @tailwind base;
        @tailwind components;
        @tailwind utilities;
                
        .button-17 {
        align-items: center;
        appearance: none;
        background-color: #fff;
        border-radius: 24px;
        border-style: none;
        box-shadow: rgba(0, 0, 0, .2) 0 3px 5px -1px,rgba(0, 0, 0, .14) 0 6px 10px 0,rgba(0, 0, 0, .12) 0 1px 18px 0;
        box-sizing: border-box;
        color: #3c4043;
        cursor: pointer;
        display: inline-flex;
        fill: currentcolor;
        font-family: "Google Sans",Roboto,Arial,sans-serif;
        font-size: 14px;
        font-weight: 500;
        height: 48px;
        justify-content: center;
        letter-spacing: .25px;
        line-height: normal;
        max-width: 100%;
        overflow: visible;
        padding: 2px 24px;
        position: relative;
        text-align: center;
        text-transform: none;
        transition: box-shadow 280ms cubic-bezier(.4, 0, .2, 1),opacity 15ms linear 30ms,transform 270ms cubic-bezier(0, 0, .2, 1) 0ms;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        width: auto;
        will-change: transform,opacity;
        z-index: 0;
        }

        .button-17:hover {
        background: #F6F9FE;
        color: #174ea6;
        }

        .button-17:active {
        box-shadow: 0 4px 4px 0 rgb(60 64 67 / 30%), 0 8px 12px 6px rgb(60 64 67 / 15%);
        outline: none;
        }

        .button-17:focus {
        outline: none;
        border: 2px solid #4285f4;
        }

        .button-17:not(:disabled) {
        box-shadow: rgba(60, 64, 67, .3) 0 1px 3px 0, rgba(60, 64, 67, .15) 0 4px 8px 3px;
        }

        .button-17:not(:disabled):hover {
        box-shadow: rgba(60, 64, 67, .3) 0 2px 3px 0, rgba(60, 64, 67, .15) 0 6px 10px 4px;
        }

        .button-17:not(:disabled):focus {
        box-shadow: rgba(60, 64, 67, .3) 0 1px 3px 0, rgba(60, 64, 67, .15) 0 4px 8px 3px;
        }

        .button-17:not(:disabled):active {
        box-shadow: rgba(60, 64, 67, .3) 0 4px 4px 0, rgba(60, 64, 67, .15) 0 8px 12px 6px;
        }

        .button-17:disabled {
        box-shadow: rgba(60, 64, 67, .3) 0 1px 3px 0, rgba(60, 64, 67, .15) 0 4px 8px 3px;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-900">

    {{ template "header"}}
   {{ template "sidebar"}}
   <div id="sisa-ruang" style="width: 112rem; margin-left: 7rem; margin-right: 1.875rem; height: 130rem; margin-top: 4.25rem; background: white; border: 1px solid #d1d1d1; border-radius: 15px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.05); display: flex; flex-direction: column; gap: 1rem; padding: 1rem;">
    <!-- Header Pencarian -->
        <div class="grid grid-cols-12 items-center p-4 bg-white shadow-md rounded-md" >
            <!-- Ikon Settings -->
            <div class="col-span flex justify-center">
                <button class="bg-gradient-to-r from-rose-400 to-rose-500 text-white hover:from-rose-500 hover:to-rose-600 transition-all duration-300" style="width: 70%; height: 34px; border-radius: 5px;">
                    <i class="fa-solid fa-arrow-left"></i>
                </button>
            </div>

            <!-- Input Pencarian -->
            <div class="col-span-10">
                <input type="text" placeholder="Cari produk..." id="cari_produk" class="w-full p-2 border rounded-md">
            </div>

            <div class="col-span-1 ml-5 flex items-center justify-center space-x-4">
                <i class="fas fa-cog text-rose-500 text-2xl hover:text-rose-600 transition-colors"></i>
                <i class="fas fa-shopping-cart text-rose-500 text-2xl hover:text-rose-600 transition-colors"></i>
                <button id="cari_produk_button" class="bg-gradient-to-r from-rose-400 to-rose-500 text-white px-4 py-2 rounded-md hover:from-rose-500 hover:to-rose-600 transition-all duration-300">
                    Cari..
                </button>
            </div>

        </div>

        <!-- Filter Row -->
        <div class="grid grid-cols-12 gap-3">
        <div class="col-span-3">
            <select class="w-full p-2 border rounded-md font-bold text-gray-500">
                <option selected>Lokasi</option>
                <option>Jakarta</option>
                <option>Surabaya</option>
                <option>Bandung</option>
            </select>
        </div>

        <div class="col-span-3">
            <select class="w-full p-2 border rounded-md font-bold text-gray-500">
                <option selected>Terdekat</option>
                <option>Radius 5 KM</option>
                <option>Radius 10 KM</option>
                <option>Radius 20 KM</option>
            </select>
        </div>

        <div class="col-span-3">
            <select class="w-full p-2 border rounded-md font-bold text-gray-500">
                <option selected>COD</option>
                <option>Tersedia</option>
                <option>Tidak Tersedia</option>
            </select>
        </div>

        <div class="col-span-3">
            <select class="w-full p-2 border rounded-md font-bold text-gray-500">
                <option selected>Promo</option>
                <option>Diskon 10%</option>
                <option>Gratis Ongkir</option>
                <option>Cashback</option>
            </select>
        </div>
        
    </div>

            <div class="flex items-center w-full mt-3">
                <div class="flex-2 text-lg font-bold text-gray-600 bg-gray-100 px-4 py-2 rounded-md text-center shadow-sm">
                    <h2 class="text-sm text-gray-600">Produk</h2>
                </div>
                <hr class="flex-1 h-[1.5px] bg-gray-400 border-none ml-2">
            </div>

    <div id="display_produk"class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6 p-4" >
    <!-- Card Produk -->

    
    
    </div>

    <div class="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6">
    <div class="flex flex-1 justify-between sm:hidden">
        <a href="#" class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50">Previous</a>
        <a href="#" class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50">Next</a>
    </div>
    <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
        <div>
        <p class="text-sm text-gray-700">
            Menunjukan
            <span class="font-medium" id="mulai">0</span>
            sampai
            <span class="font-medium" id="sampai"></span>
            dari
            <span class="font-medium" id="dari"></span>
            Hasil
        </p>
        </div>
        <div>
        <nav id="paginasi_produk" class="isolate inline-flex -space-x-px rounded-md shadow-xs" aria-label="Pagination">
            
        </nav>
        </div>
    </div>
    </div>

{{/* bootscript digunakan saat program dimulai */}}
<script>

        let inputan = "";

        function getStartEndRanges(totalData, batchSize = 20) {
            let ranges = [];
            let multiple = 1;
            
            for (let i = 0; i < totalData; i += batchSize) {
                let start = i;
                let end = Math.min(i + batchSize, totalData);
                ranges.push({ multiple, start, end });
                multiple++;


                console.log(ranges);
                console.log(batchSize);
            }
            return ranges;
        }


        async function Ambil_barang(jenis, start, end) {
            const url = "/app/endpoint.go"; // Endpoint tujuan
            const data = { data: "apakek" }; // Data yang dikirim (sesuaikan)

            if (jenis == null || jenis == ""){
                console.log("mencari secara default");

                try {
                    const response = await fetch(url, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json", // Format JSON
                        },
                        body: JSON.stringify({ tujuan: "Ambil Data Barang", data }), // Konversi data ke JSON
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }

                    const result = await response.json(); // Mengambil response JSON
                    return result;
                } catch (error) {
                    console.error("Gagal mengambil data:", error);
                    return null;
                }
            } else {
                console.log(jenis, "ini yang dicari");
            }
        }

        document.getElementById("cari_produk").addEventListener("keyup", function() {
            inputan = this.value;
            console.log("Input sekarang:", inputan);
        });

        async function Cari_barang(input, start, end) {
            try {
                console.log("Item dengan nama =", input);

                const response = await fetch("/app/endpoint.go", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ tujuan: "Mencari Barang", data: input })
                });

                // Cek apakah responsenya sukses
                if (!response.ok) {
                    console.error("Response error status:", response.status);
                    throw new Error("Network response was not ok");
                }

               
                const result = await response.json(); // Mengambil response JSON
                return result;

            } catch (error) {
                console.error("Terjadi kesalahan saat fetch:", error);
            }
        }



    async function TampilkanBarang(tipe, start, end) {
        const container = document.getElementById("display_produk"); // Elemen tempat card ditampilkan
        container.innerHTML = ""; // Kosongkan kontainer sebelum menambahkan data baru

        console.log("tampilkan barang dijalankan mengecek end", end)
        
        let data

        if(tipe == "mencari" && inputan.length != 0){
        console.log("mengecek apakah inputan itu ada nilainya?", inputan);
        data = await Cari_barang(inputan);
            if (!data) {
                container.innerHTML = "<p class='text-red-500'>Gagal mengambil data produk.</p>";
                return;
            }
        } else {
            
            data = await Ambil_barang();
            if (!data) {
                container.innerHTML = "<p class='text-red-500'>Gagal mengambil data produk.</p>";
                return;
            }
        }

        let totalData = data.length;
        let result = getStartEndRanges(totalData);
        console.log(result);

        document.getElementById("dari").textContent = totalData;
        document.getElementById("mulai").textContent = start;
        document.getElementById("sampai").textContent = end;

        let paginationContainer = document.getElementById("paginasi_produk");

        // Reset isi kontainer sebelum diisi ulang
        paginationContainer.innerHTML = "";

        let paginationHTML = `  
            <span class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-gray-300 ring-inset hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
                <span class="sr-only">Previous</span>
                <svg class="size-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
                    <path fill-rule="evenodd" d="M11.78 5.22a.75.75 0 0 1 0 1.06L8.06 10l3.72 3.72a.75.75 0 1 1-1.06 1.06l-4.25-4.25a.75.75 0 0 1 0-1.06l4.25-4.25a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd" />
                </svg>
            </span>
        `;

        // Looping untuk menambahkan angka pagination
        result.forEach(hasil => {
            console.log(hasil.multiple); // Menampislkan angka yang akan ditampilkan di pagination

            paginationHTML += `
                <a start-attribut="mulai-${hasil.start}" end-attribut="mulai-${hasil.end}" class="relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-900 ring-1 ring-gray-300 ring-inset hover:bg-gray-50 focus:z-20 focus:outline-offset-0">${hasil.multiple}</a>
            `;

            console.log(hasil.start, hasil.end, hasil.multiple)
        });

        paginationHTML += `
            <span class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-gray-300 ring-inset hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
                <span class="sr-only">Next</span>
                <svg class="size-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
                    <path fill-rule="evenodd" d="M8.22 5.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.75.75 0 0 1-1.06-1.06L11.94 10 8.22 6.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd" />
                </svg>
            </span>
        `;

        // Set HTML setelah loop selesai
        paginationContainer.innerHTML = paginationHTML;


        data.slice(start, end).forEach(async (item) => {

        console.log(start,end, "dimulai diakhiri");
            const card = document.createElement("div");
            card.className = "border rounded-md shadow-md p-4 hover:shadow-lg transition";
            card.id = "display_produk_card";

            // Menambahkan atribut custom ke dalam card
            card.setAttribute("nama", item.nama);
            card.setAttribute("jenis_pakaian", item.jenis_pakaian);
            card.setAttribute("deskripsi", item.deskripsi);

            // Pastikan nama tidak mengandung karakter yang tidak valid untuk class
            const safeNama = item.nama.replace(/\s+/g, "-").toLowerCase();

            card.innerHTML = `
            <div class="bg-white shadow-md rounded-lg overflow-hidden p-3">
                <!-- Gambar (tetap mengikuti canvas-${safeNama}) -->
                <div class="canvas-${safeNama} w-full h-40 bg-gray-300 rounded-md flex items-center justify-center overflow-hidden">
                    <span class="text-gray-500 text-sm">Gambar ${item.nama}</span>
                </div>

                <!-- Nama Produk -->
                <h3 class="text-lg font-semibold text-gray-900 mt-2">${item.nama}</h3>

                <!-- Jenis Pakaian -->
                <div class="h-10 flex items-center">
                    <p class="text-gray-500 text-sm">${item.jenis_pakaian}</p>
                </div>

                <!-- Deskripsi -->
                <p class="text-gray-700 text-sm mt-2">${item.deskripsi}</p>

                <!-- Harga -->
                <p class="text-rose-600 font-bold text-lg mt-2">Rp ${item.harga.toLocaleString()}</p>

                <!-- Tombol Beli -->
                <button onclick="" class="w-full mt-3 bg-rose-500 text-white py-2 rounded-md hover:bg-rose-600 transition duration-300">
                    Tambah Keranjang
                </button>
            </div>
        `;

        container.appendChild(card);

        try {
        const response = await fetch("/app/endpoint.go", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                tujuan : "Makan",
                data:{
                    nama: item.nama,
                    jenis_pakaian: item.jenis_pakaian
                }
            }),
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        // Pastikan response berupa binary file
        const blob = await response.blob();
        const imgUrl = URL.createObjectURL(blob);

        // Masukkan gambar ke dalam card
        const canvas = card.querySelector(`.canvas-${safeNama}`);
        if (canvas) {
            canvas.innerHTML = `<img src="${imgUrl}" class="w-full h-full object-cover rounded-md" alt="${item.nama}">`;
        }
    } catch (error) {
        console.error(`Gagal mengambil data untuk ${item.nama}:`, error);
    }

        // Fetch ke /app/endpoint.go/
        });

    }

    // Panggil fungsi saat halaman dimuat
        document.addEventListener("DOMContentLoaded", TampilkanBarang("default" , 0, 20));

        const pagination = document.getElementById("paginasi_produk");
        
        if (pagination) {
            pagination.addEventListener("click", function(event) {
                const target = event.target.closest("a"); 
                if (target) {
            console.log(target.textContent.trim());

        // Tambahkan efek background indigo
        target.classList.add("bg-indigo-600", "transition", "duration-400", "ease-in-out", "scale-105");

        // Ambil nilai dari atribut start-attribut dan end-attribut
        let startAttr = target.getAttribute("start-attribut").replace(/\D/g, "");
        let endAttr = target.getAttribute("end-attribut").replace(/\D/g, "");

        console.log(startAttr);
        console.log(endAttr);

        const awal = parseInt(startAttr);
        const akhir = parseInt(endAttr);

        if(inputan.length != 0){
         TampilkanBarang("default", awal, akhir);
        } else{
        TampilkanBarang("mencari", awal, akhir);
        }
        // Cetak ke console
        console.log("Start Attribut:", startAttr);
        console.log("End Attribut:", endAttr);

        // Hapus efek setelah 0.4 detik
        setTimeout(() => {
            target.classList.remove("bg-indigo-600", "scale-105");
        }, 400);
    }

            });
        }
    
    document.getElementById("sedang_dimana").textContent = "Home"

    const token = localStorage.getItem("token");

    console.log(localStorage.getItem("token"));

        // Ambil ukuran viewport (lebar & tinggi)
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;

        // Ambil ukuran sidebar dan navbar
        const sidebarWidth = document.getElementById("sidebar").offsetWidth; // Gantilah dengan kelas sidebar yang sesuai
        const navbarHeight = document.getElementById("navbar").offsetHeight; // Gantilah dengan kelas navbar yang sesuai

        // Hitung sisa ruang
        const remainingWidth = viewportWidth - sidebarWidth;
        const remainingHeight = viewportHeight - navbarHeight;

        console.log(`Sisa ruang lebar: ${remainingWidth}px`);
        console.log(`Sisa ruang tinggi: ${remainingHeight}px`);

</script>

<script> 
document.getElementById("cari_produk_button").addEventListener("click", function () {

    TampilkanBarang("mencari", 0, 20);
    
    // Jika ingin memanggil fungsi async Ambil_barang, bisa ditambahkan seperti ini:
    // Ambil_barang(inputan);
});
</script>
    
</body>
</html>